<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
	<!-- Throttle, authorize, validate, cache, or transform the requests -->
	<inbound>
		<include-fragment fragment-id="Limit-api-call" />
		<base />
		<choose>
			<!-- Check if a valid "Basic" authorization header is present -->
			<when condition="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsBasic() != null)">
				<!-- Extract and store the username as a string variable -->
				<set-variable name="userId" value="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsBasic().UserId)" />
				<!-- Extract and store the password as a string variable -->
				<set-variable name="password" value="@(context.Request.Headers.GetValueOrDefault("Authorization","").AsBasic().Password)" />
				<choose>
					<!-- Compare USER1 string variables with the secure named values -->
					<when condition="@((string)context.Variables["userId"] == "{{basicAuthUsername}}" && (string)context.Variables["password"] == "{{basicAuthPassword}}")">
						<!-- Credentials are valid. Continue processing the request. -->
					</when>
					<!-- Compare USER2 string variables with the secure named values -->
					<when condition="@((string)context.Variables["userId"] == "{{user1-username}}" && (string)context.Variables["password"] == "{{user1-password}}")">
						<!-- Credentials are valid. Continue processing the request. -->
					</when>
					<otherwise>
						<!-- Credentials are invalid. Return a 401 Unauthorized response. -->
						<return-response>
							<set-status code="401" reason="Unauthorized" />
							<set-header name="WWW-Authenticate" exists-action="override">
								<value>Invalid Username or Password</value>
							</set-header>
						</return-response>
					</otherwise>
				</choose>
			</when>
			<otherwise>
				<!-- No Authorization header was provided. Return a 401 Unauthorized response. -->
				<return-response>
					<set-status code="401" reason="Unauthorized" />
					<set-header name="WWW-Authenticate" exists-action="override">
						<value>Missing Authorization header</value>
					</set-header>
				</return-response>
			</otherwise>
		</choose>
	</inbound>
	<!-- Control if and how the requests are forwarded to services  -->
	<backend>
		<base />
	</backend>
	<!-- Customize the responses -->
	<outbound>
		<base />
	</outbound>
	<!-- Handle exceptions and customize error responses  -->
	<on-error>
		<base />
	</on-error>
</policies>